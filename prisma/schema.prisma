datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  username String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
  posts    Post[]
  messages Message[]
  likes    Like[]

  avatar   String?

  isActive Boolean @default(false)
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Post {
  id    String @id @default(cuid())
  title String
  gif   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Message {
  id        String    @id @default(cuid())
  text      String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String

  parentId  String?
  parent    Message?  @relation("ParentChildren", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  children  Message[] @relation("ParentChildren")

  likes     Like[]
}

model Like {
  id        String    @id @default(cuid())
  emoji     String

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String

  message   Message    @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  messageId String

  @@unique([emoji, userId, messageId])
}